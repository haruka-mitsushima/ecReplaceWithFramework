service: ecreplacewithframework
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '3'

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-api-gateway-throttling
  - serverless-iam-roles-per-function
  
custom:
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 5

provider:
  name: aws
  runtime: nodejs16.x
  region: ap-northeast-1
  httpApi:
    cors:
      allowedOrigins:
        - 'http://localhost:3000'

functions:
  first:
    handler: first.hello
  second:
    handler: second.hello
  getUserById:
    handler: src/userHandler.getUserById
    events:
      - httpApi:
          method: get
          path: /getUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  preTop:
    handler: src/itemHandler.preTop
    events:
      - httpApi:
          method: get
          path: /preTop
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  getItemByGenre:
    handler: src/itemHandler.getItemByGenre
    events:
      - httpApi:
          method: get
          path: /getItemByGenre
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  getItems:
    handler: src/itemHandler.getItems
    events:
      - httpApi:
          method: get
          path: /getItems
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  getItemById:
    handler: src/itemHandler.getItemById
    events:
      - httpApi:
          method: get
          path: /getItemById
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  