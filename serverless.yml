service: ecreplacewithframework
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '3'

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-api-gateway-throttling
  - serverless-iam-roles-per-function
  
custom:
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 5

provider:
  name: aws
  runtime: nodejs16.x
  region: ap-northeast-1
  httpApi:
    cors:
      allowedOrigins:
        - 'http://localhost:3000'

functions:
  first:
    handler: first.hello
  second:
    handler: second.hello
  selectRentalHistories:
    handler: src/userHandler.selectRentalHistories
    events:
      - httpApi:
          method: get
          path: /selectRentalHistories
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  selectCart:
    handler: src/userHandler.selectCart
    events:
      - httpApi:
          method: get
          path: /selectCart
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  getAllItems:
    handler: src/itemHandler.getAllItems
    events:
      - httpApi:
          method: get
          path: /getAllItems
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  login:
    handler: src/userHandler.login
    events:
      - httpApi:
          method: post
          path: /login
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  addLogedinCart:
    handler: src/userHandler.addLogedinCart
    events:
      - httpApi:
          method: post
          path: /addLogedinCart
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  deleteCart:
    handler: src/userHandler.deleteCart
    events:
      - httpApi:
          method: get
          path: /deleteCart
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  addCart:
    handler: src/userHandler.addCart
    events:
      - httpApi:
          method: post
          path: /addCart
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  getUserById:
    handler: src/userHandler.getUserById
    events:
      - httpApi:
          method: get
          path: /getUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:*:*:table/users'
  preTop:
    handler: src/itemHandler.preTop
    events:
      - httpApi:
          method: get
          path: /preTop
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  getItemByGenre:
    handler: src/itemHandler.getItemByGenre
    events:
      - httpApi:
          method: get
          path: /getItemByGenre
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  getItems:
    handler: src/itemHandler.getItems
    events:
      - httpApi:
          method: get
          path: /getItems
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  getItemById:
    handler: src/itemHandler.getItemById
    events:
      - httpApi:
          method: get
          path: /getItemById
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:*:*:table/items'
  
resources:
  Resources:
    UsersDynamoDBTable: 
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: users
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
    ItemsDynamoDBTable: 
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: items
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5